pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "seajun/backend"
        DOCKER_TAG = "${GIT_BRANCH.tokenize('/').last()}-${GIT_COMMIT.substring(0,7)}"
        GITLAB_CREDENTIALS_ID = "haejun"  // GitLab 인증 정보
        GITLAB_REPO = "https://lab.ssafy.com/s11-fintech-finance-sub1/S11P21A304.git"  // GitLab 저장소 URL
        BRANCH = "develop"  // 체크아웃할 브랜치
        DOCKER_CREDENTIALS_ID = "dockerhub-hub-haejun"  // Docker Hub 인증 정보
        SSH_CREDENTIALS_ID = "ssafy-ec2-ssh"  // SSH 자격증명 ID
        SERVER_IP = "13.124.102.223"  // 배포할 서버 IP 주소
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: "${GITLAB_CREDENTIALS_ID}", branch: "${BRANCH}", url: "${GITLAB_REPO}"
            }
        }

        stage('Add Env') {
            steps {
                dir('backend') {  // Jenkinsfile이 있는 backend 폴더 기준
                    withCredentials([file(credentialsId: 'application', variable: 'application')]) {
                        sh 'cp ${application} src/main/resources/application.yml'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'gradle build'
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push("latest")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                sshagent([SSH_CREDENTIALS_ID]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${SERVER_IP} '
                            docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker stop backend || true
                            docker rm backend || true
                            docker run -d --name backend -p 8081:8080 ${DOCKER_IMAGE}:${DOCKER_TAG}
                        '
                    """
                }
            }
        }

    }
}
